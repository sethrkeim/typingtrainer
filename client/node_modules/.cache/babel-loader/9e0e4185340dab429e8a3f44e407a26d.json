{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/client/src/test.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport axios from 'axios';\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport CanvasJSReact from './canvasjs.react.js';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      let get = {\n        getData: true,\n        username: this.props.username\n      };\n      axios.post('http://localhost:9000/', get).then(res => {\n        console.log(res);\n\n        if (res.data) {\n          this.setState({\n            times: res.data['times']\n          });\n          this.charstats = res.data['unigram'];\n          this.bicharstats = res.data['bigram'];\n        } else {\n          console.log('new username');\n        }\n      });\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n');\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord(all));\n      });\n      document.getElementById(\"filled-basic\").focus();\n    };\n\n    this.newWord = all => {\n      var num = Math.floor(Math.random() * all.length);\n      console.log(num);\n      console.log(all[num]);\n      this.setState({\n        word: all[num]['word']\n      }, function () {\n        var c = [];\n\n        for (var i = 0; i < this.state.word.length; i++) {\n          c.push(\"black\");\n        }\n\n        this.setState({\n          correct: c\n        });\n      }); // var time = new Date();\n      // var times = this.state.times\n      // if(this.state.prev == 0){\n      //   // do nothing\n      // } else {\n      //   var t1 = time.getTime()\n      //   times.push(t1 - this.state.prev)\n      //   this.setState({\n      //     prev: t1,\n      //     times: times\n      //   });\n      // }\n\n      var times = this.state.times;\n      var count = 0;\n      console.log(times);\n\n      for (var i = 0; i < times.length; i++) {\n        for (var j = 0; j < times[i].length; j++) {\n          count = count + times[i][j];\n        }\n      }\n\n      var mean = count / times.length / 1000;\n      this.setState({\n        avg: mean.toFixed(2)\n      });\n\n      if (times.length == this.props.num) {\n        this.setState({\n          stats: true\n        });\n        this.setHtml();\n      }\n    };\n\n    this.onKey = e => {\n      console.log(this.state.times);\n      console.log(this.state.avg);\n      console.log('in key');\n\n      if (e.keyCode != 8 && e.keyCode != 46) {\n        var time = new Date();\n        var t1 = time.getTime();\n        var times = this.state.times;\n\n        if (this.state.prev == 0) {\n          times.push([]);\n        } else {\n          console.log(e.key);\n          var cs = this.charstats;\n          var p = this.state.prev;\n          var pc = this.state.prevChar;\n\n          if (pc.length === 2) {\n            pc.shift();\n          }\n\n          var d = {};\n          d[e.key] = t1 - p;\n          pc.push([e.key, t1 - p]);\n\n          if (pc.length > 1) {\n            var bcs = this.bicharstats;\n            var bigram = pc[0][0] + pc[1][0];\n            var bitime = parseFloat(pc[0][1]) + parseFloat(pc[1][1]);\n\n            if (bigram in bcs) {\n              var bichar = bcs[bigram];\n              bichar.push(bitime);\n              bcs[bigram] = bichar;\n            } else {\n              bcs[bigram] = [bitime];\n            }\n          }\n\n          if (e.key in cs) {\n            var char = cs[e.key];\n            char.push(t1 - p);\n            cs[e.key] = char;\n          } else {\n            cs[e.key] = [t1 - p];\n          }\n\n          this.charstats = cs;\n\n          if (this.state.text.length == 0) {\n            times.push([t1 - p]);\n          } else {\n            times[this.state.times.length - 1].push(t1 - p);\n          }\n        }\n\n        console.log(this.charstats);\n        this.setState({\n          prev: t1\n        });\n        var t = this.state.text;\n        var c = this.state.correct;\n\n        if (e.key == this.state.word[t.length]) {\n          c[t.length] = \"green\";\n          this.setState({\n            text: t + e.key\n          });\n        }\n\n        if (!c.includes(\"black\") && !c.includes(\"red\")) {\n          this.newWord(this.state.all);\n          this.setState({\n            text: '',\n            correct: c\n          });\n        }\n      }\n    };\n\n    this.findMean = array => {\n      var sum = 0;\n\n      for (var i = 0; i < array.length; i++) {\n        sum = sum + array[i];\n      }\n\n      return (sum / array.length).toFixed(2);\n    };\n\n    this.setHtml = () => {\n      console.log(this.bicharstats);\n      var dict = this.charstats;\n      var newDict = {};\n\n      for (var key in dict) {\n        newDict[key] = this.findMean(dict[key]);\n      }\n\n      console.log(newDict);\n      var sorted = this.sortJsObject(newDict);\n      console.log('new dict');\n      console.log(newDict);\n      var h = '';\n      sorted.map((element, index) => {\n        h = h + `<p>${element[0]}: ${element[1]}</p>`;\n      });\n      this.setState({\n        charhtml: h\n      });\n      var datapoints = [];\n\n      for (var i = 0; i < sorted.length; i++) {\n        datapoints.push({\n          label: sorted[i][0],\n          y: parseFloat(sorted[i][1])\n        });\n      }\n\n      console.log(datapoints);\n      this.options1 = {\n        title: {\n          text: \"Character Level Stats\"\n        },\n        axisX: {\n          title: 'Character'\n        },\n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [{\n          indexLabelFontSize: 10,\n          type: 'column',\n          dataPoints: datapoints\n        }]\n      };\n      var dict = this.bicharstats;\n      var newDict = {};\n\n      for (var key in dict) {\n        newDict[key] = this.findMean(dict[key]);\n      }\n\n      console.log(newDict);\n      var sorted = this.sortJsObject(newDict);\n      console.log('new dict');\n      console.log(newDict);\n      var h = '';\n      sorted.map((element, index) => {\n        h = h + `<p>${element[0]}: ${element[1]}</p>`;\n      });\n      this.setState({\n        charhtml: h\n      });\n      var datapoints = [];\n\n      for (var i = 0; i < sorted.length; i++) {\n        datapoints.push({\n          label: sorted[i][0],\n          y: parseFloat(sorted[i][1])\n        });\n      }\n\n      console.log(datapoints);\n      this.options2 = {\n        title: {\n          text: \"Bigram Stats\"\n        },\n        axisX: {\n          title: 'Bigram'\n        },\n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [{\n          indexLabelFontSize: 10,\n          type: 'column',\n          dataPoints: datapoints\n        }]\n      };\n      let historicalstats = {\n        username: this.props.username,\n        data: {\n          unigram: this.charstats,\n          bigram: this.bicharstats,\n          times: this.state.times\n        }\n      };\n      console.log(this.props.username);\n      axios.post('http://localhost:9000/', historicalstats);\n    };\n\n    this.sortJsObject = dict => {\n      var keys = [];\n\n      for (var key in dict) {\n        keys[keys.length] = key;\n      }\n\n      var values = [];\n\n      for (var i = 0; i < keys.length; i++) {\n        values[values.length] = dict[keys[i]];\n      }\n\n      var sortedValues = values.sort(this.sortNumber);\n      console.log(sortedValues);\n      var sorted = [];\n\n      for (var i = 0; i < sortedValues.length; i++) {\n        for (var k in dict) {\n          if (dict[k] == sortedValues[i]) {\n            sorted.push([k, sortedValues[i]]);\n          }\n        }\n      }\n\n      return sorted;\n    };\n\n    this.sortNumber = (a, b) => {\n      return a - b;\n    };\n\n    this.charstats = {};\n    this.bicharstats = {};\n    this.options1 = {};\n    this.options2 = {};\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false,\n      prevChar: [],\n      charhtml: '<></>'\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: this.props.changeDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }\n    }, !this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true // onChange={this.change}\n      ,\n      onKeyDown: this.onKey,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }\n    })), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }\n    }, \"Results: \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    }, \"Number of words typed total: \", this.state.times.length), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 13\n      }\n    }, \"Words per minute:\", (60 / this.state.avg).toFixed(2)), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.options1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.options2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/client/src/test.js"],"names":["React","axios","TextField","Button","CanvasJSReact","CanvasJSChart","Test","Component","constructor","props","componentDidMount","get","getData","username","post","then","res","console","log","data","setState","times","charstats","bicharstats","fetch","r","text","all","split","i","length","line","w","push","word","freq","newWord","document","getElementById","focus","num","Math","floor","random","c","state","correct","count","j","mean","avg","toFixed","stats","setHtml","onKey","e","keyCode","time","Date","t1","getTime","prev","key","cs","p","pc","prevChar","shift","d","bcs","bigram","bitime","parseFloat","bichar","char","t","includes","findMean","array","sum","dict","newDict","sorted","sortJsObject","h","map","element","index","charhtml","datapoints","label","y","options1","title","axisX","axisY","indexLabelFontSize","type","dataPoints","options2","historicalstats","unigram","keys","values","sortedValues","sort","sortNumber","k","a","b","render","checker","color","display","changeDisplay","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\nimport { Button } from '@material-ui/core'\nimport CanvasJSReact from './canvasjs.react.js';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.charstats = {};\n    this.bicharstats = {};\n\n    this.options1 = {};\n    this.options2 = {};\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false,\n      prevChar: [],\n      charhtml: '<></>',\n    });\n  }\n\n  componentDidMount = () => {\n    let get = {\n      getData: true,\n      username: this.props.username\n    }\n    axios.post('http://localhost:9000/', get)\n      .then(res => {\n        console.log(res)\n        if(res.data) {\n          this.setState({ times: res.data['times'] })\n          this.charstats = res.data['unigram']\n          this.bicharstats = res.data['bigram']\n        } else {\n          console.log('new username')\n        }\n        \n      });\n\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord(all))\n    });\n\n    document.getElementById(\"filled-basic\").focus()\n  }\n\n  newWord = (all) => {\n    \n    var num = Math.floor(Math.random() * all.length);\n    console.log(num)\n    console.log(all[num])\n    this.setState({\n      word: all[num]['word']\n    }, function() {\n      var c = []\n      for(var i = 0; i < this.state.word.length; i++) {\n        c.push(\"black\")\n      }\n      this.setState({\n        correct: c\n      });\n    });\n\n    // var time = new Date();\n    // var times = this.state.times\n    // if(this.state.prev == 0){\n    //   // do nothing\n    // } else {\n    //   var t1 = time.getTime()\n    //   times.push(t1 - this.state.prev)\n    //   this.setState({\n    //     prev: t1,\n    //     times: times\n    //   });\n    // }\n    var times = this.state.times\n    var count = 0;\n    console.log(times)\n    for(var i = 0; i < times.length; i++) {\n      for(var j = 0; j < times[i].length; j++) {\n        count = count + times[i][j];\n      }\n    }\n    var mean = ((count / times.length) / 1000);\n    \n    this.setState({\n      avg: mean.toFixed(2)\n    });\n    \n    if(times.length == this.props.num) {\n      this.setState({\n        stats: true\n      })\n      this.setHtml();\n    }\n  }\n\n\n\n  onKey = (e) => {\n    console.log(this.state.times)\n    console.log(this.state.avg)\n    console.log('in key')\n    if(e.keyCode != 8 && e.keyCode != 46) {\n      var time = new Date();\n      var t1 = time.getTime();\n      var times = this.state.times;\n      if(this.state.prev == 0) {\n        times.push([])\n      } else {\n        console.log(e.key);\n        var cs = this.charstats\n        var p = this.state.prev;\n        var pc = this.state.prevChar;\n        if(pc.length === 2) {\n          pc.shift()\n        }\n        var d = {};\n        d[e.key] = t1-p;\n        pc.push([e.key, t1-p]);\n        if(pc.length > 1) {\n          var bcs = this.bicharstats;\n          var bigram = pc[0][0] + pc[1][0]\n          var bitime = parseFloat(pc[0][1]) + parseFloat(pc[1][1]);\n          if(bigram in bcs) {\n            var bichar = bcs[bigram];\n            bichar.push(bitime)\n            bcs[bigram] = bichar\n          } else {\n            bcs[bigram] = [bitime]\n          }\n        }\n        \n        if(e.key in cs) {\n          var char = cs[e.key];\n          char.push(t1-p);\n          cs[e.key] = char\n        } else {\n          cs[e.key] = [t1-p]\n        }\n        this.charstats = cs;\n        \n        if(this.state.text.length == 0) {\n          times.push([t1-p]);\n        } else {\n          times[this.state.times.length-1].push(t1-p)\n        }\n        \n      }\n\n      console.log(this.charstats)\n      this.setState({\n        prev: t1\n      })\n      var t = this.state.text\n      \n      var c = this.state.correct;\n      if(e.key == this.state.word[t.length]) {\n        c[t.length] = \"green\"\n        this.setState({\n          text: t+e.key\n        });\n      } \n    \n   \n    \n      if(!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord(this.state.all)\n        this.setState({\n          text: '',\n          correct: c\n        })\n      }\n    }\n  }\n    \n\n  findMean = (array) => {\n    var sum = 0;\n    for(var i = 0; i < array.length; i++) {\n      sum = sum + array[i];\n    }\n    return (sum / array.length).toFixed(2);\n  }\n\n  setHtml = () => {\n    console.log(this.bicharstats)\n    var dict = this.charstats;\n    var newDict = {}\n    for(var key in dict) {\n      newDict[key] = this.findMean(dict[key]);\n    }\n    console.log(newDict)\n    var sorted = this.sortJsObject(newDict);\n    console.log('new dict')\n    console.log(newDict)\n    var h = ''\n    sorted.map((element, index) => {\n      h = h + `<p>${element[0]}: ${element[1]}</p>`\n    })\n    this.setState({\n      charhtml: h\n    })\n    var datapoints = [];\n    for(var i = 0; i < sorted.length; i++) {\n      \n      datapoints.push({ label: sorted[i][0], y: parseFloat(sorted[i][1])})\n    }\n    console.log(datapoints)\n    this.options1 = {\n        title: {\n            text: \"Character Level Stats\"\n        },\n        axisX: {\n          title: 'Character'\n        }, \n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [\n          {\n              indexLabelFontSize: 10,\n              type: 'column',\n              dataPoints: datapoints\n              \n          }\n        ]\n    }\n\n\n    var dict = this.bicharstats;\n    var newDict = {}\n    for(var key in dict) {\n      newDict[key] = this.findMean(dict[key]);\n    }\n    console.log(newDict)\n    var sorted = this.sortJsObject(newDict);\n    console.log('new dict')\n    console.log(newDict)\n    var h = ''\n    sorted.map((element, index) => {\n      h = h + `<p>${element[0]}: ${element[1]}</p>`\n    })\n    this.setState({\n      charhtml: h\n    })\n    var datapoints = [];\n    for(var i = 0; i < sorted.length; i++) {\n      \n      datapoints.push({ label: sorted[i][0], y: parseFloat(sorted[i][1])})\n    }\n    console.log(datapoints)\n    this.options2 = {\n        title: {\n            text: \"Bigram Stats\"\n        },\n        axisX: {\n          title: 'Bigram'\n        }, \n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [\n          {\n              indexLabelFontSize: 10,\n              type: 'column',\n              dataPoints: datapoints\n              \n          }\n        ]\n    }\n    let historicalstats = {\n      username: this.props.username,\n      data: {\n        unigram: this.charstats,\n        bigram: this.bicharstats,\n        times: this.state.times\n      }\n    }\n    console.log(this.props.username)\n    axios.post('http://localhost:9000/', historicalstats)\n  }\n\n  sortJsObject = (dict) => {\n      \n    var keys = [];\n    for(var key in dict) { \n      keys[keys.length] = key;\n    }\n\n    var values = [];     \n    for(var i = 0; i < keys.length; i++) {\n      values[values.length] = dict[keys [i]];\n    }\n\n    var sortedValues = values.sort(this.sortNumber);\n    console.log(sortedValues);\n\n    var sorted = []\n    for(var i = 0; i < sortedValues.length; i++) {\n      for(var k in dict) {\n        if(dict[k] == sortedValues[i]) {\n          sorted.push([k, sortedValues[i]])\n        }\n      }\n    }\n    return sorted;\n  } \n\n  // this is needed to sort values as integers\n  sortNumber = (a,b) => {\n    return a - b;\n  }\n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n  \n\n    \n    return (\n        <>\n        <Button variant=\"contained\" onClick={this.props.changeDisplay}>Back</Button>\n        \n        <div style={{margin: 'auto'}}>\n        {!this.state.stats && \n        <>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            // onChange={this.change}\n            onKeyDown={this.onKey}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n            </>\n          }\n          {this.state.stats &&\n          <>\n          <p>Results: </p>\n          \n          </>\n          }\n            <p>\n              Number of words typed total: {this.state.times.length}\n            </p>\n            <p>\n              Words per minute:\n              {(60 / this.state.avg).toFixed(2)}\n            </p>\n            {/* {this.state.stats &&\n            <div dangerouslySetInnerHTML={{ __html: this.state.charhtml }} />\n            } */}\n            {this.state.stats &&\n            <>\n            <div style={{ margin: '50px'}}>\n              <CanvasJSChart options = {this.options1} />\n            </div>\n            <div style={{ margin: '50px'}}>\n              <CanvasJSChart options = {this.options2} />\n            </div>\n            \n            </>\n            }\n          \n        </div>\n        \n        \n        </>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}