{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/src/test.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n');\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord(all));\n        console.log(this.state.all[1]['word']);\n      });\n    };\n\n    this.newWord = all => {\n      var num = Math.floor(Math.random() * all.length);\n      console.log(num);\n      console.log(all[num]);\n      this.setState({\n        word: all[num]['word']\n      }, function () {\n        var c = [];\n\n        for (var i = 0; i < this.state.word.length; i++) {\n          c.push(\"black\");\n        }\n\n        this.setState({\n          correct: c\n        });\n      });\n      var time = new Date();\n      var times = this.state.times;\n\n      if (this.state.prev == 0) {\n        var t1 = time.getTime();\n        this.setState({\n          prev: t1\n        });\n      } else {\n        var t1 = time.getTime();\n        times.push(t1 - this.state.prev);\n        this.setState({\n          prev: t1,\n          times: times\n        });\n      }\n\n      var count = 0;\n\n      for (var i = 0; i < times.length; i++) {\n        count = count + times[i];\n      }\n\n      var mean = count / times.length / 1000;\n      this.setState({\n        avg: mean.toFixed(2)\n      });\n    };\n\n    this.change = e => {\n      var text = e.target.value;\n      this.setState({\n        text: e.target.value\n      });\n\n      for (var i = 0; i < this.state.word.length; i++) {\n        var key = text[i];\n        var c = this.state.correct;\n\n        if (text.length - 1 < i) {\n          c[i] = \"black\";\n        } else if (key == this.state.word[i]) {\n          c[i] = \"green\";\n        } else {\n          c[i] = \"red\";\n        }\n      }\n\n      if (!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord(this.state.all);\n        this.setState({\n          text: '',\n          correct: c\n        });\n      }\n    };\n\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      num: this.props.num\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: this.props.changeDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true,\n      onChange: this.change,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"Seconds per word:\", this.state.avg), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, \"Words per minute:\", 60 / this.state.avg)));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/src/test.js"],"names":["React","TextField","Button","Test","Component","constructor","props","componentDidMount","fetch","then","r","text","all","data","split","i","length","line","w","push","word","freq","console","log","setState","newWord","state","num","Math","floor","random","c","correct","time","Date","times","prev","t1","getTime","count","mean","avg","toFixed","change","e","target","value","key","includes","render","checker","map","element","index","color","display","changeDisplay","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\nimport { Button } from '@material-ui/core'\n\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      num: this.props.num\n    });\n  }\n\n  componentDidMount = () => {\n    \n\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord(all))\n      console.log(this.state.all[1]['word'])\n    });\n\n    \n  }\n\n  newWord = (all) => {\n    \n    var num = Math.floor(Math.random() * all.length);\n    console.log(num)\n    console.log(all[num])\n    this.setState({\n      word: all[num]['word']\n    }, function() {\n      var c = []\n      for(var i = 0; i < this.state.word.length; i++) {\n        c.push(\"black\")\n      }\n      this.setState({\n        correct: c\n      });\n    });\n\n    var time = new Date();\n    var times = this.state.times\n    if(this.state.prev == 0){\n      var t1 = time.getTime();\n      this.setState({\n        prev: t1\n      })\n    } else {\n      var t1 = time.getTime()\n      times.push(t1 - this.state.prev)\n      this.setState({\n        prev: t1,\n        times: times\n      });\n    }\n    var count = 0;\n    for(var i = 0; i < times.length; i++) {\n      \n      count = count + times[i];\n    }\n    var mean = ((count / times.length) / 1000);\n    \n    this.setState({\n      avg: mean.toFixed(2)\n    })\n  }\n\n  change = (e) => {\n    var text = e.target.value\n    this.setState({\n      text: e.target.value\n    })\n    for(var i = 0; i < this.state.word.length; i++) {\n      var key = text[i];\n      var c = this.state.correct;\n      if(text.length-1 < i) {\n        c[i] = \"black\"\n      } else if(key == this.state.word[i]) {\n        c[i] = \"green\";\n      } else {\n        c[i] = \"red\"\n      }\n      \n    }\n    if(!c.includes(\"black\") && !c.includes(\"red\")) {\n      this.newWord(this.state.all)\n      this.setState({\n        text: '',\n        correct: c\n      })\n    }\n\n  }\n    \n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n    return (\n        <>\n        <Button variant=\"contained\" onClick={this.props.changeDisplay}>Back</Button>\n        <div style={{margin: 'auto'}}>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            onChange={this.change}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n            <p>\n              Seconds per word: \n              {this.state.avg}\n            </p>\n            <p>\n              Words per minute:\n              {60 / this.state.avg}\n            </p>\n        </div>\n        </>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}