{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/client/src/test.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport axios from 'axios';\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport CanvasJSReact from './canvasjs.react.js';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      let get = {\n        getData: true,\n        username: this.props.username\n      };\n      axios.post('http://localhost:9000/', get).then(res => {\n        console.log(res.data); // this.setState({ times: res.data['data'].times })\n        // this.charstats = res.data['data'].unigram\n        // this.bicharstats = res.data['data'].bigram\n      });\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n');\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord(all));\n      });\n      document.getElementById(\"filled-basic\").focus();\n    };\n\n    this.newWord = all => {\n      var num = Math.floor(Math.random() * all.length);\n      console.log(num);\n      console.log(all[num]);\n      this.setState({\n        word: all[num]['word']\n      }, function () {\n        var c = [];\n\n        for (var i = 0; i < this.state.word.length; i++) {\n          c.push(\"black\");\n        }\n\n        this.setState({\n          correct: c\n        });\n      }); // var time = new Date();\n      // var times = this.state.times\n      // if(this.state.prev == 0){\n      //   // do nothing\n      // } else {\n      //   var t1 = time.getTime()\n      //   times.push(t1 - this.state.prev)\n      //   this.setState({\n      //     prev: t1,\n      //     times: times\n      //   });\n      // }\n\n      var times = this.state.times;\n      var count = 0;\n      console.log(times);\n\n      for (var i = 0; i < times.length; i++) {\n        for (var j = 0; j < times[i].length; j++) {\n          count = count + times[i][j];\n        }\n      }\n\n      var mean = count / times.length / 1000;\n      this.setState({\n        avg: mean.toFixed(2)\n      });\n\n      if (times.length == this.props.num) {\n        this.setState({\n          stats: true\n        });\n        this.setHtml();\n      }\n    };\n\n    this.onKey = e => {\n      console.log(this.state.times);\n      console.log(this.state.avg);\n      console.log('in key');\n\n      if (e.keyCode != 8 && e.keyCode != 46) {\n        var time = new Date();\n        var t1 = time.getTime();\n        var times = this.state.times;\n\n        if (this.state.prev == 0) {\n          times.push([]);\n        } else {\n          console.log(e.key);\n          var cs = this.charstats;\n          var p = this.state.prev;\n          var pc = this.state.prevChar;\n\n          if (pc.length === 2) {\n            pc.shift();\n          }\n\n          var d = {};\n          d[e.key] = t1 - p;\n          pc.push([e.key, t1 - p]);\n\n          if (pc.length > 1) {\n            var bcs = this.bicharstats;\n            var bigram = pc[0][0] + pc[1][0];\n            var bitime = parseFloat(pc[0][1]) + parseFloat(pc[1][1]);\n\n            if (bigram in bcs) {\n              var bichar = bcs[bigram];\n              bichar.push(bitime);\n              bcs[bigram] = bichar;\n            } else {\n              bcs[bigram] = [bitime];\n            }\n          }\n\n          if (e.key in cs) {\n            var char = cs[e.key];\n            char.push(t1 - p);\n            cs[e.key] = char;\n          } else {\n            cs[e.key] = [t1 - p];\n          }\n\n          this.charstats = cs;\n\n          if (this.state.text.length == 0) {\n            times.push([t1 - p]);\n          } else {\n            times[this.state.times.length - 1].push(t1 - p);\n          }\n        }\n\n        console.log(this.charstats);\n        this.setState({\n          prev: t1\n        });\n        var t = this.state.text;\n        var c = this.state.correct;\n\n        if (e.key == this.state.word[t.length]) {\n          c[t.length] = \"green\";\n          this.setState({\n            text: t + e.key\n          });\n        }\n\n        if (!c.includes(\"black\") && !c.includes(\"red\")) {\n          this.newWord(this.state.all);\n          this.setState({\n            text: '',\n            correct: c\n          });\n        }\n      }\n    };\n\n    this.findMean = array => {\n      var sum = 0;\n\n      for (var i = 0; i < array.length; i++) {\n        sum = sum + array[i];\n      }\n\n      return (sum / array.length).toFixed(2);\n    };\n\n    this.setHtml = () => {\n      console.log(this.bicharstats);\n      var dict = this.charstats;\n      var newDict = {};\n\n      for (var key in dict) {\n        newDict[key] = this.findMean(dict[key]);\n      }\n\n      console.log(newDict);\n      var sorted = this.sortJsObject(newDict);\n      console.log('new dict');\n      console.log(newDict);\n      var h = '';\n      sorted.map((element, index) => {\n        h = h + `<p>${element[0]}: ${element[1]}</p>`;\n      });\n      this.setState({\n        charhtml: h\n      });\n      var datapoints = [];\n\n      for (var i = 0; i < sorted.length; i++) {\n        datapoints.push({\n          label: sorted[i][0],\n          y: parseFloat(sorted[i][1])\n        });\n      }\n\n      console.log(datapoints);\n      this.options1 = {\n        title: {\n          text: \"Character Level Stats\"\n        },\n        axisX: {\n          title: 'Character'\n        },\n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [{\n          indexLabelFontSize: 10,\n          type: 'column',\n          dataPoints: datapoints\n        }]\n      };\n      var dict = this.bicharstats;\n      var newDict = {};\n\n      for (var key in dict) {\n        newDict[key] = this.findMean(dict[key]);\n      }\n\n      console.log(newDict);\n      var sorted = this.sortJsObject(newDict);\n      console.log('new dict');\n      console.log(newDict);\n      var h = '';\n      sorted.map((element, index) => {\n        h = h + `<p>${element[0]}: ${element[1]}</p>`;\n      });\n      this.setState({\n        charhtml: h\n      });\n      var datapoints = [];\n\n      for (var i = 0; i < sorted.length; i++) {\n        datapoints.push({\n          label: sorted[i][0],\n          y: parseFloat(sorted[i][1])\n        });\n      }\n\n      console.log(datapoints);\n      this.options2 = {\n        title: {\n          text: \"Bigram Stats\"\n        },\n        axisX: {\n          title: 'Bigram'\n        },\n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [{\n          indexLabelFontSize: 10,\n          type: 'column',\n          dataPoints: datapoints\n        }]\n      };\n      let historicalstats = {\n        username: this.props.username,\n        data: {\n          unigram: this.charstats,\n          bigram: this.bicharstats,\n          times: this.state.times\n        }\n      };\n      console.log(this.props.username);\n      axios.post('http://localhost:9000/', historicalstats);\n    };\n\n    this.sortJsObject = dict => {\n      var keys = [];\n\n      for (var key in dict) {\n        keys[keys.length] = key;\n      }\n\n      var values = [];\n\n      for (var i = 0; i < keys.length; i++) {\n        values[values.length] = dict[keys[i]];\n      }\n\n      var sortedValues = values.sort(this.sortNumber);\n      console.log(sortedValues);\n      var sorted = [];\n\n      for (var i = 0; i < sortedValues.length; i++) {\n        for (var k in dict) {\n          if (dict[k] == sortedValues[i]) {\n            sorted.push([k, sortedValues[i]]);\n          }\n        }\n      }\n\n      return sorted;\n    };\n\n    this.sortNumber = (a, b) => {\n      return a - b;\n    };\n\n    this.charstats = {};\n    this.bicharstats = {};\n    this.options1 = {};\n    this.options2 = {};\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false,\n      prevChar: [],\n      charhtml: '<></>'\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: this.props.changeDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }\n    }, !this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true // onChange={this.change}\n      ,\n      onKeyDown: this.onKey,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    })), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }\n    }, \"Results: \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }, \"Number of words typed total: \", this.state.times.length), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }\n    }, \"Words per minute:\", (60 / this.state.avg).toFixed(2)), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.options1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.options2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/client/src/test.js"],"names":["React","axios","TextField","Button","CanvasJSReact","CanvasJSChart","Test","Component","constructor","props","componentDidMount","get","getData","username","post","then","res","console","log","data","fetch","r","text","all","split","i","length","line","w","push","word","freq","setState","newWord","document","getElementById","focus","num","Math","floor","random","c","state","correct","times","count","j","mean","avg","toFixed","stats","setHtml","onKey","e","keyCode","time","Date","t1","getTime","prev","key","cs","charstats","p","pc","prevChar","shift","d","bcs","bicharstats","bigram","bitime","parseFloat","bichar","char","t","includes","findMean","array","sum","dict","newDict","sorted","sortJsObject","h","map","element","index","charhtml","datapoints","label","y","options1","title","axisX","axisY","indexLabelFontSize","type","dataPoints","options2","historicalstats","unigram","keys","values","sortedValues","sort","sortNumber","k","a","b","render","checker","color","display","changeDisplay","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\nimport { Button } from '@material-ui/core'\nimport CanvasJSReact from './canvasjs.react.js';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.charstats = {};\n    this.bicharstats = {};\n\n    this.options1 = {};\n    this.options2 = {};\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false,\n      prevChar: [],\n      charhtml: '<></>',\n    });\n  }\n\n  componentDidMount = () => {\n    let get = {\n      getData: true,\n      username: this.props.username\n    }\n    axios.post('http://localhost:9000/', get)\n      .then(res => {\n        console.log(res.data)\n        // this.setState({ times: res.data['data'].times })\n        // this.charstats = res.data['data'].unigram\n        // this.bicharstats = res.data['data'].bigram\n      })\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord(all))\n    });\n\n    document.getElementById(\"filled-basic\").focus()\n  }\n\n  newWord = (all) => {\n    \n    var num = Math.floor(Math.random() * all.length);\n    console.log(num)\n    console.log(all[num])\n    this.setState({\n      word: all[num]['word']\n    }, function() {\n      var c = []\n      for(var i = 0; i < this.state.word.length; i++) {\n        c.push(\"black\")\n      }\n      this.setState({\n        correct: c\n      });\n    });\n\n    // var time = new Date();\n    // var times = this.state.times\n    // if(this.state.prev == 0){\n    //   // do nothing\n    // } else {\n    //   var t1 = time.getTime()\n    //   times.push(t1 - this.state.prev)\n    //   this.setState({\n    //     prev: t1,\n    //     times: times\n    //   });\n    // }\n    var times = this.state.times\n    var count = 0;\n    console.log(times)\n    for(var i = 0; i < times.length; i++) {\n      for(var j = 0; j < times[i].length; j++) {\n        count = count + times[i][j];\n      }\n    }\n    var mean = ((count / times.length) / 1000);\n    \n    this.setState({\n      avg: mean.toFixed(2)\n    });\n    \n    if(times.length == this.props.num) {\n      this.setState({\n        stats: true\n      })\n      this.setHtml();\n    }\n  }\n\n\n\n  onKey = (e) => {\n    console.log(this.state.times)\n    console.log(this.state.avg)\n    console.log('in key')\n    if(e.keyCode != 8 && e.keyCode != 46) {\n      var time = new Date();\n      var t1 = time.getTime();\n      var times = this.state.times;\n      if(this.state.prev == 0) {\n        times.push([])\n      } else {\n        console.log(e.key);\n        var cs = this.charstats\n        var p = this.state.prev;\n        var pc = this.state.prevChar;\n        if(pc.length === 2) {\n          pc.shift()\n        }\n        var d = {};\n        d[e.key] = t1-p;\n        pc.push([e.key, t1-p]);\n        if(pc.length > 1) {\n          var bcs = this.bicharstats;\n          var bigram = pc[0][0] + pc[1][0]\n          var bitime = parseFloat(pc[0][1]) + parseFloat(pc[1][1]);\n          if(bigram in bcs) {\n            var bichar = bcs[bigram];\n            bichar.push(bitime)\n            bcs[bigram] = bichar\n          } else {\n            bcs[bigram] = [bitime]\n          }\n        }\n        \n        if(e.key in cs) {\n          var char = cs[e.key];\n          char.push(t1-p);\n          cs[e.key] = char\n        } else {\n          cs[e.key] = [t1-p]\n        }\n        this.charstats = cs;\n        \n        if(this.state.text.length == 0) {\n          times.push([t1-p]);\n        } else {\n          times[this.state.times.length-1].push(t1-p)\n        }\n        \n      }\n\n      console.log(this.charstats)\n      this.setState({\n        prev: t1\n      })\n      var t = this.state.text\n      \n      var c = this.state.correct;\n      if(e.key == this.state.word[t.length]) {\n        c[t.length] = \"green\"\n        this.setState({\n          text: t+e.key\n        });\n      } \n    \n   \n    \n      if(!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord(this.state.all)\n        this.setState({\n          text: '',\n          correct: c\n        })\n      }\n    }\n  }\n    \n\n  findMean = (array) => {\n    var sum = 0;\n    for(var i = 0; i < array.length; i++) {\n      sum = sum + array[i];\n    }\n    return (sum / array.length).toFixed(2);\n  }\n\n  setHtml = () => {\n    console.log(this.bicharstats)\n    var dict = this.charstats;\n    var newDict = {}\n    for(var key in dict) {\n      newDict[key] = this.findMean(dict[key]);\n    }\n    console.log(newDict)\n    var sorted = this.sortJsObject(newDict);\n    console.log('new dict')\n    console.log(newDict)\n    var h = ''\n    sorted.map((element, index) => {\n      h = h + `<p>${element[0]}: ${element[1]}</p>`\n    })\n    this.setState({\n      charhtml: h\n    })\n    var datapoints = [];\n    for(var i = 0; i < sorted.length; i++) {\n      \n      datapoints.push({ label: sorted[i][0], y: parseFloat(sorted[i][1])})\n    }\n    console.log(datapoints)\n    this.options1 = {\n        title: {\n            text: \"Character Level Stats\"\n        },\n        axisX: {\n          title: 'Character'\n        }, \n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [\n          {\n              indexLabelFontSize: 10,\n              type: 'column',\n              dataPoints: datapoints\n              \n          }\n        ]\n    }\n\n\n    var dict = this.bicharstats;\n    var newDict = {}\n    for(var key in dict) {\n      newDict[key] = this.findMean(dict[key]);\n    }\n    console.log(newDict)\n    var sorted = this.sortJsObject(newDict);\n    console.log('new dict')\n    console.log(newDict)\n    var h = ''\n    sorted.map((element, index) => {\n      h = h + `<p>${element[0]}: ${element[1]}</p>`\n    })\n    this.setState({\n      charhtml: h\n    })\n    var datapoints = [];\n    for(var i = 0; i < sorted.length; i++) {\n      \n      datapoints.push({ label: sorted[i][0], y: parseFloat(sorted[i][1])})\n    }\n    console.log(datapoints)\n    this.options2 = {\n        title: {\n            text: \"Bigram Stats\"\n        },\n        axisX: {\n          title: 'Bigram'\n        }, \n        axisY: {\n          title: 'Milliseconds'\n        },\n        data: [\n          {\n              indexLabelFontSize: 10,\n              type: 'column',\n              dataPoints: datapoints\n              \n          }\n        ]\n    }\n    let historicalstats = {\n      username: this.props.username,\n      data: {\n        unigram: this.charstats,\n        bigram: this.bicharstats,\n        times: this.state.times\n      }\n    }\n    console.log(this.props.username)\n    axios.post('http://localhost:9000/', historicalstats)\n  }\n\n  sortJsObject = (dict) => {\n      \n    var keys = [];\n    for(var key in dict) { \n      keys[keys.length] = key;\n    }\n\n    var values = [];     \n    for(var i = 0; i < keys.length; i++) {\n      values[values.length] = dict[keys [i]];\n    }\n\n    var sortedValues = values.sort(this.sortNumber);\n    console.log(sortedValues);\n\n    var sorted = []\n    for(var i = 0; i < sortedValues.length; i++) {\n      for(var k in dict) {\n        if(dict[k] == sortedValues[i]) {\n          sorted.push([k, sortedValues[i]])\n        }\n      }\n    }\n    return sorted;\n  } \n\n  // this is needed to sort values as integers\n  sortNumber = (a,b) => {\n    return a - b;\n  }\n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n  \n\n    \n    return (\n        <>\n        <Button variant=\"contained\" onClick={this.props.changeDisplay}>Back</Button>\n        \n        <div style={{margin: 'auto'}}>\n        {!this.state.stats && \n        <>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            // onChange={this.change}\n            onKeyDown={this.onKey}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n            </>\n          }\n          {this.state.stats &&\n          <>\n          <p>Results: </p>\n          \n          </>\n          }\n            <p>\n              Number of words typed total: {this.state.times.length}\n            </p>\n            <p>\n              Words per minute:\n              {(60 / this.state.avg).toFixed(2)}\n            </p>\n            {/* {this.state.stats &&\n            <div dangerouslySetInnerHTML={{ __html: this.state.charhtml }} />\n            } */}\n            {this.state.stats &&\n            <>\n            <div style={{ margin: '50px'}}>\n              <CanvasJSChart options = {this.options1} />\n            </div>\n            <div style={{ margin: '50px'}}>\n              <CanvasJSChart options = {this.options2} />\n            </div>\n            \n            </>\n            }\n          \n        </div>\n        \n        \n        </>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}