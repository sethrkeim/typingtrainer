{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/src/test.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n');\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord(all));\n      });\n      document.getElementById(\"filled-basic\").focus();\n    };\n\n    this.newWord = all => {\n      var num = Math.floor(Math.random() * all.length);\n      console.log(num);\n      console.log(all[num]);\n      this.setState({\n        word: all[num]['word']\n      }, function () {\n        var c = [];\n\n        for (var i = 0; i < this.state.word.length; i++) {\n          c.push(\"black\");\n        }\n\n        this.setState({\n          correct: c\n        });\n      });\n      var time = new Date();\n      var times = this.state.times;\n\n      if (this.state.prev == 0) {// do nothing\n      } else {\n        var t1 = time.getTime();\n        times.push(t1 - this.state.prev);\n        this.setState({\n          prev: t1,\n          times: times\n        });\n      }\n\n      var count = 0;\n\n      for (var i = 0; i < times.length; i++) {\n        count = count + times[i];\n      }\n\n      var mean = count / times.length / 1000;\n      this.setState({\n        avg: mean.toFixed(2)\n      });\n\n      if (times.length == this.props.num) {\n        this.setState({\n          stats: true\n        });\n      }\n    };\n\n    this.onKey = e => {\n      if (this.state.prev == 0) {\n        var time = new Date();\n        var t1 = time.getTime();\n        this.setState({\n          prev: t1\n        });\n      }\n\n      if (e.keyCode != 8 && e.keyCode != 46) {\n        var t = this.state.text;\n        var c = this.state.correct;\n\n        if (e.key == this.state.word[t.length]) {\n          c[t.length] = \"green\";\n          console.log();\n          this.setState({\n            text: t + e.key\n          });\n        }\n      }\n\n      if (!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord(this.state.all);\n        this.setState({\n          text: '',\n          correct: c\n        });\n      }\n    };\n\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: this.props.changeDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, !this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true // onChange={this.change}\n      ,\n      onKeyDown: this.onKey,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    })), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, \"Results: \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, \"Seconds per word:\", this.state.avg), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, \"Words per minute:\", 60 / this.state.avg)));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/src/test.js"],"names":["React","TextField","Button","Test","Component","constructor","props","componentDidMount","fetch","then","r","text","all","data","split","i","length","line","w","push","word","freq","console","log","setState","newWord","document","getElementById","focus","num","Math","floor","random","c","state","correct","time","Date","times","prev","t1","getTime","count","mean","avg","toFixed","stats","onKey","e","keyCode","t","key","includes","render","checker","map","element","index","color","display","changeDisplay","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\nimport { Button } from '@material-ui/core'\n\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false\n    });\n  }\n\n  componentDidMount = () => {\n    \n\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord(all))\n    });\n\n    document.getElementById(\"filled-basic\").focus()\n  }\n\n  newWord = (all) => {\n    \n    var num = Math.floor(Math.random() * all.length);\n    console.log(num)\n    console.log(all[num])\n    this.setState({\n      word: all[num]['word']\n    }, function() {\n      var c = []\n      for(var i = 0; i < this.state.word.length; i++) {\n        c.push(\"black\")\n      }\n      this.setState({\n        correct: c\n      });\n    });\n\n    var time = new Date();\n    var times = this.state.times\n    if(this.state.prev == 0){\n      // do nothing\n    } else {\n      var t1 = time.getTime()\n      times.push(t1 - this.state.prev)\n      this.setState({\n        prev: t1,\n        times: times\n      });\n    }\n    var count = 0;\n    for(var i = 0; i < times.length; i++) {\n      \n      count = count + times[i];\n    }\n    var mean = ((count / times.length) / 1000);\n    \n    this.setState({\n      avg: mean.toFixed(2)\n    });\n\n    if(times.length == this.props.num) {\n      this.setState({\n        stats: true\n      })\n    }\n  }\n\n  // change = (e) => {\n  //   if(this.state.prev == 0) {\n  //     var time = new Date();\n  //     var t1 = time.getTime();\n  //     this.setState({\n  //       prev: t1\n  //     })\n  //   }\n\n  //   var text = e.target.value\n  //   this.setState({\n  //     text: e.target.value\n  //   })\n  //   for(var i = 0; i < this.state.word.length; i++) {\n  //     var key = text[i];\n  //     var c = this.state.correct;\n  //     if(text.length-1 < i) {\n  //       c[i] = \"black\"\n  //     } else if(key == this.state.word[i]) {\n  //       c[i] = \"green\";\n  //     } else {\n  //       c[i] = \"red\"\n  //     }\n      \n  //   }\n  //   if(!c.includes(\"black\") && !c.includes(\"red\")) {\n  //     this.newWord(this.state.all)\n  //     this.setState({\n  //       text: '',\n  //       correct: c\n  //     })\n  //   }\n\n  // }\n\n\n\n  onKey = (e) => {\n    if(this.state.prev == 0) {\n      var time = new Date();\n      var t1 = time.getTime();\n      this.setState({\n        prev: t1\n      })\n    }\n    \n    \n    if(e.keyCode != 8 && e.keyCode != 46) {\n      var t = this.state.text\n      \n      var c = this.state.correct;\n      if(e.key == this.state.word[t.length]) {\n        c[t.length] = \"green\"\n        console.log()\n        this.setState({\n          text: t+e.key\n        });\n      } \n    }\n   \n    \n    if(!c.includes(\"black\") && !c.includes(\"red\")) {\n      this.newWord(this.state.all)\n      this.setState({\n        text: '',\n        correct: c\n      })\n    }\n  }\n    \n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n    return (\n        <>\n        <Button variant=\"contained\" onClick={this.props.changeDisplay}>Back</Button>\n        \n        <div style={{margin: 'auto'}}>\n        {!this.state.stats && \n        <>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            // onChange={this.change}\n            onKeyDown={this.onKey}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n            </>\n          }\n          {this.state.stats &&\n          <>\n          <p>Results: </p>\n          \n          </>\n          }\n            <p>\n              Seconds per word: \n              {this.state.avg}\n            </p>\n            <p>\n              Words per minute:\n              {60 / this.state.avg}\n            </p>\n        </div>\n        \n        \n        </>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}