{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/src/test.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n');\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord(all));\n      });\n      document.getElementById(\"filled-basic\").focus();\n    };\n\n    this.newWord = all => {\n      var num = Math.floor(Math.random() * all.length);\n      console.log(num);\n      console.log(all[num]);\n      this.setState({\n        word: all[num]['word']\n      }, function () {\n        var c = [];\n\n        for (var i = 0; i < this.state.word.length; i++) {\n          c.push(\"black\");\n        }\n\n        this.setState({\n          correct: c\n        });\n      }); // var time = new Date();\n      // var times = this.state.times\n      // if(this.state.prev == 0){\n      //   // do nothing\n      // } else {\n      //   var t1 = time.getTime()\n      //   times.push(t1 - this.state.prev)\n      //   this.setState({\n      //     prev: t1,\n      //     times: times\n      //   });\n      // }\n\n      var times = this.state.times;\n      var count = 0;\n      console.log(times);\n\n      for (var i = 0; i < times.length; i++) {\n        for (var j = 0; j < times[i].length; j++) {\n          count = count + times[i][j];\n        }\n      }\n\n      var mean = count / times.length / 1000;\n      this.setState({\n        avg: mean.toFixed(2)\n      });\n\n      if (times.length == this.props.num) {\n        this.setState({\n          stats: true\n        });\n      }\n    };\n\n    this.onKey = e => {\n      console.log('in key');\n\n      if (e.keyCode != 8 && e.keyCode != 46) {\n        var time = new Date();\n        var t1 = time.getTime();\n        var times = this.state.times;\n\n        if (this.state.prev == 0) {\n          times.push([]);\n        } else {\n          console.log(e.key);\n          var cs = this.charstats;\n\n          if (e.key in cs) {\n            cs[e.key] = cs[e.key].push(t1 - p);\n          } else {\n            cs[e.key] = [t1 - p];\n          }\n\n          this.charstats = cs;\n          var p = this.state.prev;\n\n          if (this.state.text.length == 0) {\n            times.push([t1 - p]);\n          } else {\n            times[this.state.times.length - 1].push(t1 - p);\n          }\n        }\n\n        console.log(this.charstats);\n        this.setState({\n          prev: t1\n        });\n        var t = this.state.text;\n        var c = this.state.correct;\n\n        if (e.key == this.state.word[t.length]) {\n          c[t.length] = \"green\";\n          this.setState({\n            text: t + e.key\n          });\n        }\n\n        if (!c.includes(\"black\") && !c.includes(\"red\")) {\n          this.newWord(this.state.all);\n          this.setState({\n            text: '',\n            correct: c\n          });\n        }\n      }\n    };\n\n    this.charstats = {};\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: this.props.changeDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, !this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true // onChange={this.change}\n      ,\n      onKeyDown: this.onKey,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    })), this.state.stats && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, \"Results: \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \"Seconds per word:\", this.state.avg), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"Words per minute:\", (60 / this.state.avg).toFixed(2))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/src/test.js"],"names":["React","TextField","Button","Test","Component","constructor","props","componentDidMount","fetch","then","r","text","all","data","split","i","length","line","w","push","word","freq","console","log","setState","newWord","document","getElementById","focus","num","Math","floor","random","c","state","correct","times","count","j","mean","avg","toFixed","stats","onKey","e","keyCode","time","Date","t1","getTime","prev","key","cs","charstats","p","t","includes","render","checker","map","element","index","color","display","changeDisplay","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\nimport { Button } from '@material-ui/core'\n\nexport default class Test extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.charstats = {};\n\n\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: '',\n      times: [],\n      prev: 0,\n      avg: 0,\n      stats: false\n    });\n  }\n\n  componentDidMount = () => {\n    \n\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord(all))\n    });\n\n    document.getElementById(\"filled-basic\").focus()\n  }\n\n  newWord = (all) => {\n    \n    var num = Math.floor(Math.random() * all.length);\n    console.log(num)\n    console.log(all[num])\n    this.setState({\n      word: all[num]['word']\n    }, function() {\n      var c = []\n      for(var i = 0; i < this.state.word.length; i++) {\n        c.push(\"black\")\n      }\n      this.setState({\n        correct: c\n      });\n    });\n\n    // var time = new Date();\n    // var times = this.state.times\n    // if(this.state.prev == 0){\n    //   // do nothing\n    // } else {\n    //   var t1 = time.getTime()\n    //   times.push(t1 - this.state.prev)\n    //   this.setState({\n    //     prev: t1,\n    //     times: times\n    //   });\n    // }\n    var times = this.state.times\n    var count = 0;\n    console.log(times)\n    for(var i = 0; i < times.length; i++) {\n      for(var j = 0; j < times[i].length; j++) {\n        count = count + times[i][j];\n      }\n    }\n    var mean = ((count / times.length) / 1000);\n    \n    this.setState({\n      avg: mean.toFixed(2)\n    });\n    \n    if(times.length == this.props.num) {\n      this.setState({\n        stats: true\n      })\n    }\n  }\n\n\n\n  onKey = (e) => {\n    \n    console.log('in key')\n    if(e.keyCode != 8 && e.keyCode != 46) {\n      var time = new Date();\n      var t1 = time.getTime();\n      var times = this.state.times;\n      if(this.state.prev == 0) {\n        times.push([])\n      } else {\n        console.log(e.key);\n        var cs = this.charstats\n        if(e.key in cs) {\n          cs[e.key] = cs[e.key].push(t1-p)\n        } else {\n          cs[e.key] = [t1-p];\n        }\n        this.charstats = cs;\n        var p = this.state.prev;\n        if(this.state.text.length == 0) {\n          times.push([t1-p]);\n        } else {\n          times[this.state.times.length-1].push(t1-p)\n        }\n        \n      }\n      console.log(this.charstats)\n      this.setState({\n        prev: t1\n      })\n      var t = this.state.text\n      \n      var c = this.state.correct;\n      if(e.key == this.state.word[t.length]) {\n        c[t.length] = \"green\"\n        this.setState({\n          text: t+e.key\n        });\n      } \n    \n   \n    \n      if(!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord(this.state.all)\n        this.setState({\n          text: '',\n          correct: c\n        })\n      }\n    }\n  }\n    \n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n    return (\n        <>\n        <Button variant=\"contained\" onClick={this.props.changeDisplay}>Back</Button>\n        \n        <div style={{margin: 'auto'}}>\n        {!this.state.stats && \n        <>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            // onChange={this.change}\n            onKeyDown={this.onKey}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n            </>\n          }\n          {this.state.stats &&\n          <>\n          <p>Results: </p>\n          \n          </>\n          }\n            <p>\n              Seconds per word: \n              {this.state.avg}\n            </p>\n            <p>\n              Words per minute:\n              {(60 / this.state.avg).toFixed(2)}\n            </p>\n        </div>\n        \n        \n        </>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}