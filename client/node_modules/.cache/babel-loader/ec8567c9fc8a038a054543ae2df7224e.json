{"ast":null,"code":"var _jsxFileName = \"/Users/Seth/Documents/projects/typing_trainer/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      fetch('/dictFreq.tsv').then(r => r.text()).then(text => {\n        var all = [];\n        var data = text.split('\\n'); // var line = data[0].split(\"\\t\")\n        // console.log(line[1].split(\"\"));\n\n        for (var i = 0; i < data.length; i++) {\n          var line = data[i].split('\\t');\n\n          try {\n            var w = line[1].split(\"\");\n            all.push({\n              word: line[1].split(\"\"),\n              freq: line[2]\n            });\n          } catch {\n            console.log('couldn\\'t split: ' + line[1]);\n          }\n        }\n\n        this.setState({\n          all: all\n        }, this.newWord());\n        console.log(all[1]['word']);\n      });\n    };\n\n    this.newWord = () => {\n      var num = Math.floor(Math.random() * this.state.all.length);\n      console.log(this.state.all[num]); // this.setState({\n      //   word: this.state.all[num]['word']\n      // }, function() {\n      //   var c = []\n      //   for(var i = 0; i < this.state.word.length; i++) {\n      //     c.push(\"black\")\n      //   }\n      //   this.setState({\n      //     correct: c\n      //   });\n      // });\n    };\n\n    this.change = e => {\n      var text = e.target.value;\n      this.setState({\n        text: e.target.value\n      });\n\n      for (var i = 0; i < this.state.word.length; i++) {\n        var key = text[i];\n        var c = this.state.correct;\n\n        if (text.length - 1 < i) {\n          c[i] = \"black\";\n        } else if (key == this.state.word[i]) {\n          c[i] = \"green\";\n        } else {\n          c[i] = \"red\";\n        }\n      }\n\n      if (!c.includes(\"black\") && !c.includes(\"red\")) {\n        this.newWord();\n        this.setState({\n          text: '',\n          correct: c\n        });\n      }\n    };\n\n    this.state = {\n      all: [],\n      word: [],\n      correct: [],\n      text: ''\n    };\n  }\n\n  render() {\n    var checker = this.state.word.map((element, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        id: `let${index + 1}`,\n        style: {\n          color: this.state.correct[index],\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, element);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '1000px',\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 'auto',\n        marginBottom: '50vh',\n        paddingTop: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, checker, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        color: 'white'\n      },\n      id: \"filled-basic\",\n      label: \"text\",\n      multiline: true,\n      onChange: this.change,\n      rows: 4,\n      variant: \"filled\",\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/Seth/Documents/projects/typing_trainer/src/App.js"],"names":["React","TextField","App","Component","constructor","componentDidMount","fetch","then","r","text","all","data","split","i","length","line","w","push","word","freq","console","log","setState","newWord","num","Math","floor","random","state","change","e","target","value","key","c","correct","includes","render","checker","map","element","index","color","display","height","width","margin","marginBottom","paddingTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextField } from '@material-ui/core'\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = ({\n      all: [],\n      word: [],\n      correct: [],\n      text: ''\n    });\n  }\n\n  componentDidMount = () => {\n    \n\n    fetch('/dictFreq.tsv')\n    .then((r) => r.text())\n    .then(text => {\n      var all = [];\n      var data = text.split('\\n');\n      // var line = data[0].split(\"\\t\")\n      // console.log(line[1].split(\"\"));\n      for(var i = 0; i < data.length; i++) {\n        var line = data[i].split('\\t');\n        try{\n          var w = line[1].split(\"\");\n          all.push({\n            word: line[1].split(\"\"),\n            freq: line[2]\n          })\n        } catch {\n          console.log('couldn\\'t split: ' + line[1])\n        }\n        \n      }\n      this.setState({\n        all: all\n      }, this.newWord())\n      console.log(all[1]['word'])\n    });\n\n    \n  }\n\n  newWord = () => {\n    var num = Math.floor(Math.random() * this.state.all.length);\n    console.log(this.state.all[num])\n    // this.setState({\n    //   word: this.state.all[num]['word']\n    // }, function() {\n    //   var c = []\n    //   for(var i = 0; i < this.state.word.length; i++) {\n    //     c.push(\"black\")\n    //   }\n    //   this.setState({\n    //     correct: c\n    //   });\n    // });\n\n  }\n\n  change = (e) => {\n    var text = e.target.value\n    this.setState({\n      text: e.target.value\n    })\n    for(var i = 0; i < this.state.word.length; i++) {\n      var key = text[i];\n      var c = this.state.correct;\n      if(text.length-1 < i) {\n        c[i] = \"black\"\n      } else if(key == this.state.word[i]) {\n        c[i] = \"green\";\n      } else {\n        c[i] = \"red\"\n      }\n      \n    }\n    if(!c.includes(\"black\") && !c.includes(\"red\")) {\n      this.newWord()\n      this.setState({\n        text: '',\n        correct: c\n      })\n    }\n\n  }\n    \n\n\n  render() {\n    \n    var checker = this.state.word.map((element, index) => {\n      return(\n      <p\n      id={`let${index + 1}`}\n      style={{color: this.state.correct[index], display: 'inline-block'}}>\n        {element}\n      </p>\n      );\n    })\n    return (\n      <div className=\"App\" style={{ height:'1000px', width: '100%'}}>\n        \n        <div style={{margin: 'auto', marginBottom: '50vh', paddingTop: '300px'}}>\n          {checker}\n          <br />\n          <TextField \n            style={{ color: 'white' }} \n            id=\"filled-basic\" \n            label=\"text\" \n            multiline\n            onChange={this.change}\n            rows={4}\n            variant=\"filled\"\n            value={this.state.text}\n            />\n\n        </div>\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}